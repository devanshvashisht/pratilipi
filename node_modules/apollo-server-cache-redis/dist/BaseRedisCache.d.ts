import type { KeyValueCache, KeyValueCacheSetOptions } from 'apollo-server-caching';
interface BaseRedisClient {
    set: (key: string, value: string, option?: string, optionValue?: number) => Promise<any>;
    flushdb: () => Promise<any>;
    del: (key: string) => Promise<number>;
    quit: () => Promise<any>;
}
export interface RedisClient extends BaseRedisClient {
    mget: (...key: Array<string>) => Promise<Array<string | null>>;
}
export interface RedisNoMgetClient extends BaseRedisClient {
    get: (key: string) => Promise<string | null>;
}
export interface BaseRedisCacheOptions {
    client?: RedisClient;
    noMgetClient?: RedisNoMgetClient;
}
export declare class BaseRedisCache implements KeyValueCache<string> {
    readonly client: BaseRedisClient;
    readonly defaultSetOptions: KeyValueCacheSetOptions;
    private loader;
    constructor(options: BaseRedisCacheOptions);
    set(key: string, value: string, options?: KeyValueCacheSetOptions): Promise<void>;
    get(key: string): Promise<string | undefined>;
    delete(key: string): Promise<boolean>;
    flush(): Promise<void>;
    close(): Promise<void>;
}
export {};
//# sourceMappingURL=BaseRedisCache.d.ts.map