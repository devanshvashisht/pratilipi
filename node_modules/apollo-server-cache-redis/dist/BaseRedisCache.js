"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRedisCache = void 0;
const dataloader_1 = __importDefault(require("dataloader"));
class BaseRedisCache {
    constructor(options) {
        this.defaultSetOptions = {
            ttl: 300,
        };
        const { client, noMgetClient } = options;
        if (client && noMgetClient) {
            throw Error('You may only provide one of `client` and `noMgetClient`');
        }
        else if (client) {
            this.client = client;
            this.loader = new dataloader_1.default((keys) => client.mget(...keys), {
                cache: false,
            });
        }
        else if (noMgetClient) {
            this.client = noMgetClient;
            this.loader = new dataloader_1.default((keys) => Promise.all(keys.map((key) => noMgetClient.get(key).catch(() => null))), {
                cache: false,
            });
        }
        else {
            throw Error('You must provide `client` or `noMgetClient`');
        }
    }
    async set(key, value, options) {
        const { ttl } = Object.assign({}, this.defaultSetOptions, options);
        if (typeof ttl === 'number') {
            await this.client.set(key, value, 'EX', ttl);
        }
        else {
            await this.client.set(key, value);
        }
    }
    async get(key) {
        const reply = await this.loader.load(key);
        if (reply !== null) {
            return reply;
        }
        return;
    }
    async delete(key) {
        return (await this.client.del(key)) > 0;
    }
    async flush() {
        await this.client.flushdb();
    }
    async close() {
        await this.client.quit();
        return;
    }
}
exports.BaseRedisCache = BaseRedisCache;
//# sourceMappingURL=BaseRedisCache.js.map